class StockManager:
    """Stok yÃ¶netimini yapan sÄ±nÄ±f"""
    def __init__(self):
        self.stock = {}  # ÃœrÃ¼nleri ve stok miktarlarÄ±nÄ± saklar

    def add_stock(self, product_name: str, quantity: float):
        """Belirli bir Ã¼rÃ¼ne stok ekler"""
        if product_name in self.stock:
            self.stock[product_name] += quantity
        else:
            self.stock[product_name] = quantity

    def remove_stock(self, product_name: str, quantity: float):
        """Belirli bir Ã¼rÃ¼nden stok dÃ¼ÅŸer"""
        if product_name in self.stock and self.stock[product_name] >= quantity:
            self.stock[product_name] -= quantity
        else:
            print(f"Yetersiz stok: {product_name}")

    def check_stock(self, product_name: str) -> float:
        """Belirtilen Ã¼rÃ¼nÃ¼n stok miktarÄ±nÄ± dÃ¶ndÃ¼rÃ¼r"""
        return self.stock.get(product_name, 0)

class Supplier:
    """TedarikÃ§i sÄ±nÄ±fÄ±, markete Ã¼rÃ¼n saÄŸlamak iÃ§in kullanÄ±lÄ±r"""
    def __init__(self, name: str):
        self.name = name

    def supply_product(self, product_name: str, quantity: float):
        """ÃœrÃ¼nÃ¼ belirli bir miktarda saÄŸlar"""
        print(f"{self.name} tedarikÃ§isi {quantity} birim {product_name} saÄŸladÄ±.")
        return quantity

# ğŸ›’ KullanÄ±m Ã–rneÄŸi
if __name__ == "__main__":
    # Stok yÃ¶netimi baÅŸlatÄ±lÄ±yor
    stock_manager = StockManager()
    supplier = Supplier("ABC GÄ±da")

    # TedarikÃ§iden Ã¼rÃ¼n alÄ±nÄ±yor
    supplied_quantity = supplier.supply_product("Elma", 100)  # 100 kg elma tedarik edildi
    stock_manager.add_stock("Elma", supplied_quantity)

    supplied_quantity = supplier.supply_product("SÃ¼t", 50)  # 50 adet sÃ¼t tedarik edildi
    stock_manager.add_stock("SÃ¼t", supplied_quantity)

    # Stok durumunu kontrol etme
    print(f"Elma Stok: {stock_manager.check_stock('Elma')} kg")
    print(f"SÃ¼t Stok: {stock_manager.check_stock('SÃ¼t')} adet")
